name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: RxVision2025 ${{ steps.get_version.outputs.version }}
        body: |
          ## What's Changed

          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          ```bash
          pip install rxvision2025==${{ steps.get_version.outputs.version }}
          ```

          ## Docker

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          ```

          ## Documentation

          [Full documentation](https://github.com/${{ github.repository }}/wiki)
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

  # Build and publish Python package
  build-python-package:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in pyproject.toml
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        sed -i "s/version = \".*\"/version = \"${VERSION_NO_V}\"/" pyproject.toml

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  # Build and publish Docker images
  build-docker-images:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build model artifacts
  build-model-artifacts:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,data]"

    - name: Download training data
      run: |
        python scripts/download_data_modern.py --sample

    - name: Export trained models
      run: |
        python scripts/export_models.py \
          --output-dir model-artifacts/ \
          --formats tensorflow,onnx \
          --optimize

    - name: Create model archive
      run: |
        tar -czf rxvision2025-models-${{ needs.create-release.outputs.version }}.tar.gz model-artifacts/

    - name: Upload model artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./rxvision2025-models-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: rxvision2025-models-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # Update documentation
  update-documentation:
    runs-on: ubuntu-latest
    needs: [create-release, build-python-package]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Build documentation
      run: |
        sphinx-build -b html docs/ docs/_build/html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        destination_dir: ${{ needs.create-release.outputs.version }}

    - name: Update latest documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        destination_dir: latest

  # Performance benchmarks for release
  release-benchmarks:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,data]"

    - name: Run comprehensive benchmarks
      run: |
        python scripts/run_benchmarks.py \
          --comprehensive \
          --output release-benchmarks-${{ needs.create-release.outputs.version }}.json

    - name: Upload benchmark results to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release-benchmarks-${{ needs.create-release.outputs.version }}.json
        asset_name: benchmarks-${{ needs.create-release.outputs.version }}.json
        asset_content_type: application/json

  # Security scan for release
  security-scan:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on completion
  notify-completion:
    runs-on: ubuntu-latest
    needs: [create-release, build-python-package, build-docker-images, update-documentation]
    if: always()
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success' && needs.build-python-package.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo "üì¶ Python package published to PyPI"
        echo "üê≥ Docker images published to GHCR"
        echo "üìö Documentation updated"

    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Release ${{ needs.create-release.outputs.version }} failed!"
        echo "Please check the workflow logs for details."