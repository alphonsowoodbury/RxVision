name: Security Scans

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json || true

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          pip-audit-cyclonedx.json

  # Code security scanning with CodeQL
  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # SAST scanning with Bandit
  sast-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f sarif -o bandit-results.sarif

    - name: Upload SARIF file to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: bandit-results.sarif

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: |
          bandit-report.json
          bandit-results.sarif

  # Container security scanning
  container-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t rxvision2025:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rxvision2025:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: "rxvision2025:security-scan"
        format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: grype-results.sarif

  # Infrastructure security scanning
  infrastructure-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Checkov - Infrastructure Security
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

  # License compliance scanning
  license-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=html --output-file=licenses.html
        licensecheck --ignore-packages pip setuptools wheel --zero

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.html

  # Security policy compliance
  security-policy-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "❌ SECURITY.md file not found"
          echo "Please create a security policy file"
          exit 1
        else
          echo "✅ SECURITY.md file found"
        fi

    - name: Check for vulnerability disclosure
      run: |
        if [ ! -f .github/SECURITY.md ] && [ ! -f SECURITY.md ]; then
          echo "❌ No vulnerability disclosure policy found"
          exit 1
        else
          echo "✅ Vulnerability disclosure policy found"
        fi

  # Generate security report
  generate-security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, license-scan]
    if: always()
    steps:
    - uses: actions/checkout@v4

    - name: Download all scan results
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Recommendations" >> security-summary.md
        echo "- Review all identified vulnerabilities" >> security-summary.md
        echo "- Update dependencies with known vulnerabilities" >> security-summary.md
        echo "- Address any detected secrets or sensitive data" >> security-summary.md
        echo "- Ensure license compatibility" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Security notifications
  notify-security-issues:
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-scan, sast-scan, secrets-scan, container-scan]
    if: failure() && github.event_name == 'schedule'
    steps:
    - name: Notify security team
      run: |
        echo "🚨 Security scan failed!"
        echo "Please review the security scan results and take appropriate action."
        # Add notification logic here (Slack, email, etc.)

  # Dependency update automation
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Update dependencies
      run: |
        pip-compile --upgrade requirements.in
        pip-compile --upgrade requirements-dev.in

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "🔒 Security: Update dependencies"
        body: |
          Automated dependency update to address security vulnerabilities.

          This PR updates all dependencies to their latest versions.
          Please review the changes and ensure all tests pass before merging.
        branch: security/update-dependencies
        labels: security,dependencies